import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Badge } from "@/components/ui/badge";
import { Button } from "@/components/ui/button";
import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from "@/components/ui/table";
import { AlertTriangle, ExternalLink, Shield, TrendingUp } from "lucide-react";

interface Vulnerability {
  cve: string;
  cvss: number;
  severity: string;
  service: string;
}

interface VulnerabilityListProps {
  vulnerabilities: Vulnerability[];
}

export const VulnerabilityList = ({ vulnerabilities }: VulnerabilityListProps) => {
  const getSeverityColor = (severity: string) => {
    if (!severity) return 'bg-gray-600';
    switch (severity.toUpperCase()) {
      case 'CRITICAL': return 'bg-red-600';
      case 'HIGH': return 'bg-orange-600';
      case 'MEDIUM': return 'bg-yellow-600';
      case 'LOW': return 'bg-green-600';
      default: return 'bg-gray-600';
    }
  };

  const getTreatmentStrategy = (cvss: number) => {
    if (cvss >= 9.0) return { action: 'AVOID', color: 'bg-red-700', description: 'Remove or isolate asset' };
    if (cvss >= 7.0) return { action: 'MITIGATE', color: 'bg-orange-700', description: 'Apply patches immediately' };
    if (cvss >= 4.0) return { action: 'TRANSFER', color: 'bg-yellow-700', description: 'Consider external services' };
    return { action: 'ACCEPT', color: 'bg-green-700', description: 'Monitor periodically' };
  };

  return (
    <div className="space-y-6">
      <Card className="bg-slate-800/50 border-slate-700">
        <CardHeader>
          <CardTitle className="flex items-center text-white">
            <AlertTriangle className="h-5 w-5 mr-2 text-red-400" />
            Detected Vulnerabilities
          </CardTitle>
        </CardHeader>
        <CardContent>
          <Table>
            <TableHeader>
              <TableRow className="border-slate-700">
                <TableHead className="text-slate-300">CVE</TableHead>
                <TableHead className="text-slate-300">CVSS</TableHead>
                <TableHead className="text-slate-300">Severity</TableHead>
                <TableHead className="text-slate-300">Affected Service</TableHead>
                <TableHead className="text-slate-300">Treatment</TableHead>
                <TableHead className="text-slate-300">Actions</TableHead>
              </TableRow>
            </TableHeader>
            <TableBody>
              {vulnerabilities.map((vuln, index) => {
                const treatment = getTreatmentStrategy(vuln.cvss);
                return (
                  <TableRow key={index} className="border-slate-700">
                    <TableCell className="text-white font-mono">
                      <div className="flex items-center space-x-2">
                        <Shield className="h-4 w-4 text-red-400" />
                        <span>{vuln.cve}</span>
                      </div>
                    </TableCell>
                    <TableCell className="text-white">
                      <div className="flex items-center space-x-2">
                        <TrendingUp className="h-4 w-4 text-orange-400" />
                        <span className="font-bold">{vuln.cvss}</span>
                      </div>
                    </TableCell>
                    <TableCell>
                      <Badge className={`${getSeverityColor(vuln.severity)} text-white`}>
                        {vuln.severity || "N/A"}
                      </Badge>
                    </TableCell>
                    <TableCell className="text-slate-300">{vuln.service}</TableCell>
                    <TableCell>
                      <div className="space-y-1">
                        <Badge className={`${treatment.color} text-white`}>
                          {treatment.action}
                        </Badge>
                        <p className="text-xs text-slate-400">{treatment.description}</p>
                      </div>
                    </TableCell>
                    <TableCell>
                      <Button
                        variant="outline"
                        size="sm"
                        className="text-slate-300 border-slate-600 hover:bg-slate-700"
                        onClick={() => window.open(`https://nvd.nist.gov/vuln/detail/${vuln.cve}`, '_blank')}
                      >
                        <ExternalLink className="h-3 w-3 mr-1" />
                        View NVD
                      </Button>
                    </TableCell>
                  </TableRow>
                );
              })}
            </TableBody>
          </Table>
        </CardContent>
      </Card>
    </div>
  );
};
